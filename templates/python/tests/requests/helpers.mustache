def test_generate_secured_api_key_0(self):
        """
        allow generating a secured api key without restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo")
        assert _resp == "NjgzNzE2ZDlkN2Y4MmVlZDE3NGM2Y2FlYmUwODZlZTkzMzc2Yzc5ZDdjNjFkZDY3MGVhMDBmN2Y4ZDZlYjBhOA=="

    def test_generate_secured_api_key_1(self):
        """
        allow generating a secured api key with a dict of restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={
            "search_params": {"query": "foo"},
            "valid_until": 100,
            "restrict_indices": ["bar"],
            "restrict_sources": "baz",
            "user_token": "foobarbaz",
        })
        assert _resp == "ZDhjY2YwNTJlMTY0ZmM2ZDM1NmRjMWRlYTg2N2ZhNzgyYWE4YzM0NjY0MzU2MDY0OTAxOThhNjkxMzgzYjlkMXF1ZXJ5PWZvbyZyZXN0cmljdF9pbmRpY2VzPWJhciZyZXN0cmljdF9zb3VyY2VzPWJheiZ1c2VyX3Rva2VuPWZvb2JhcmJheiZ2YWxpZF91bnRpbD0xMDA="

    def test_generate_secured_api_key_2(self):
        """
        allow generating a secured api key with from the model
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="bar", restrictions=SecuredApiKeyRestrictions(
              search_params={"query": "bar", "page": 3},
              valid_until=42,
              restrict_indices=["baz"],
              restrict_sources="foo",
              user_token="bazbarfoo",
        ))
        assert _resp == "ZDI2YzJhNTY2ZDc4YTVhNWJiZmQyZTMwZDZiNzg4Y2NiOWFiNTAwMTc0MTNjZGI3MjUwZjUxN2FmYmFlZTQ1ZWFkdmFuY2VkU3ludGF4PWZhbHNlJmFsbG93VHlwb3NPbk51bWVyaWNUb2tlbnM9dHJ1ZSZhbmFseXRpY3M9dHJ1ZSZhcm91bmRMYXRMbmc9JmFyb3VuZExhdExuZ1ZpYUlQPWZhbHNlJmF0dHJpYnV0ZUNyaXRlcmlhQ29tcHV0ZWRCeU1pblByb3hpbWl0eT1mYWxzZSZjbGlja0FuYWx5dGljcz1mYWxzZSZkZWNvbXBvdW5kUXVlcnk9dHJ1ZSZlbmFibGVBQlRlc3Q9dHJ1ZSZlbmFibGVQZXJzb25hbGl6YXRpb249ZmFsc2UmZW5hYmxlUmVSYW5raW5nPXRydWUmZW5hYmxlUnVsZXM9dHJ1ZSZmYWNldGluZ0FmdGVyRGlzdGluY3Q9ZmFsc2UmZmlsdGVycz0mZ2V0UmFua2luZ0luZm89ZmFsc2UmaGlnaGxpZ2h0UG9zdFRhZz0lM0MlMkZlbSUzRSZoaWdobGlnaHRQcmVUYWc9JTNDZW0lM0UmaGl0c1BlclBhZ2U9MjAma2VlcERpYWNyaXRpY3NPbkNoYXJhY3RlcnM9Jm1heEZhY2V0SGl0cz0xMCZtYXhWYWx1ZXNQZXJGYWNldD0xMDAmbWluUHJveGltaXR5PTEmbWluV29yZFNpemVmb3IxVHlwbz00Jm1pbldvcmRTaXplZm9yMlR5cG9zPTgmcGFnZT0zJnBlcmNlbnRpbGVDb21wdXRhdGlvbj10cnVlJnBlcnNvbmFsaXphdGlvbkltcGFjdD0xMDAmcXVlcnk9YmFyJnJlbGV2YW5jeVN0cmljdG5lc3M9MTAwJnJlcGxhY2VTeW5vbnltc0luSGlnaGxpZ2h0PWZhbHNlJnJlc3RyaWN0SGlnaGxpZ2h0QW5kU25pcHBldEFycmF5cz1mYWxzZSZyZXN0cmljdEluZGljZXM9YmF6JnJlc3RyaWN0U291cmNlcz1mb28mc2ltaWxhclF1ZXJ5PSZzbmlwcGV0RWxsaXBzaXNUZXh0PSVFMiU4MCVBNiZzb3J0RmFjZXRWYWx1ZXNCeT1jb3VudCZzdW1PckZpbHRlcnNTY29yZXM9ZmFsc2Umc3lub255bXM9dHJ1ZSZ1c2VyVG9rZW49YmF6YmFyZm9vJnZhbGlkVW50aWw9NDI="

    def test_generate_secured_api_key_and_validity_0(self):
        """
        is able to check the remaining validity of a key
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={"valid_until": 0})
        _validity = self._client.get_secured_api_key_remaining_validity(_resp)
        assert abs(_validity) == int(round(time()))

    def test_generate_secured_api_key_and_validity_1(self):
        """
        throws when the validity field is not found
        """
        try:
            _resp = self._client.generate_secured_api_key("foo", {"valid_until": None})
            self._client.get_secured_api_key_remaining_validity(_resp)
            assert False
        except Exception as e:
            assert str(e) == "valid_until not found in api key."

    def test_generate_secured_api_key_and_validity_2(self):
        """
        throws when the invalid key
        """
        try:
            self._client.get_secured_api_key_remaining_validity("foo")
            assert False
        except Exception as e:
            assert str(e) == "Incorrect padding"

    async def test_replace_all_objects_0(self):
        """
        executes with minimal parameters
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo", objects=[{"name": "John Doe"}]
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [BatchResponse(task_id=42, object_ids=["foo", "bar"])],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }

    async def test_replace_all_objects_1(self):
        """
        does many calls when len(objects) > batchSize
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo",
            objects=[
                {
                    "name": f"John Doe{i}",
                    "objectID": f"fff2bd4d-bb17-4e21-a0c4-0a8ea5e363f2{i}",
                }
                for i in range(33)
            ],
            batch_size=10,
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
            ],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }

    async def test_replace_all_objects_2(self):
        """
        batchSize is 1000 by default
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo",
            objects=[
                {
                    "name": f"John Doe{i}",
                    "objectID": f"fff2bd4d-bb17-4e21-a0c4-0a8ea5e363f2{i}",
                }
                for i in range(1001)
            ],
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
            ],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }